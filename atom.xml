<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tao&#39;s Blog</title>
  
  <subtitle>不以物喜，不以己悲</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-07-24T16:30:49.815Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>涛</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode-第 83 场双周赛</title>
    <link href="http://example.com/post/5.html"/>
    <id>http://example.com/post/5.html</id>
    <published>2022-07-24T14:28:54.274Z</published>
    <updated>2022-07-24T16:30:49.815Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/07/24/YkzuALIDS42B8Ke.png" alt="6128.png"><br>示例 1：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：ranks = [<span class="number">13</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">9</span>], suits = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;a&quot;</span>]</span><br><span class="line">输出：<span class="string">&quot;Flush&quot;</span></span><br><span class="line">解释：<span class="number">5</span> 张扑克牌的花色相同，所以返回 <span class="string">&quot;Flush&quot;</span> 。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：ranks = [<span class="number">4</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">4</span>], suits = [<span class="string">&quot;d&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>]</span><br><span class="line">输出：<span class="string">&quot;Three of a Kind&quot;</span></span><br><span class="line">解释：第一、二和四张牌组成三张相同大小的扑克牌，所以得到 <span class="string">&quot;Three of a Kind&quot;</span> 。</span><br><span class="line">注意我们也可以得到 <span class="string">&quot;Pair&quot;</span> ，但是 <span class="string">&quot;Three of a Kind&quot;</span> 是更好的手牌类型。</span><br><span class="line">有其他的 <span class="number">3</span> 张牌也可以组成 <span class="string">&quot;Three of a Kind&quot;</span> 手牌类型。</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：ranks = [<span class="number">10</span>,<span class="number">10</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">9</span>], suits = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;d&quot;</span>]</span><br><span class="line">输出：<span class="string">&quot;Pair&quot;</span></span><br><span class="line">解释：第一和第二张牌大小相同，所以得到 <span class="string">&quot;Pair&quot;</span> 。</span><br><span class="line">我们无法得到 <span class="string">&quot;Flush&quot;</span> 或者 <span class="string">&quot;Three of a Kind&quot;</span> 。</span><br></pre></td></tr></table></figure><h1>做法：<strong>按题意模拟就行了</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">ranks</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">character[]</span>&#125; <span class="variable">suits</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> bestHand = <span class="keyword">function</span>(<span class="params">ranks, suits</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (suits[<span class="number">0</span>] == suits[<span class="number">1</span>] &amp;&amp; suits[<span class="number">0</span>] == suits[<span class="number">2</span>] &amp;&amp; suits[<span class="number">0</span>] == suits[<span class="number">3</span>] &amp;&amp; suits[<span class="number">0</span>] == suits[<span class="number">4</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Flush&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> val <span class="keyword">of</span> ranks) &#123;</span><br><span class="line">        map.<span class="title function_">set</span>(val, (map.<span class="title function_">get</span>(val) || <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> val <span class="keyword">of</span> map) &#123;</span><br><span class="line">        <span class="keyword">if</span> (val[<span class="number">1</span>] &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Three of a Kind&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> val <span class="keyword">of</span> map) &#123;</span><br><span class="line">        <span class="keyword">if</span> (val[<span class="number">1</span>] == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Pair&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;High Card&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/24/Ke8gnaLkYPZ2sfB.png" alt="6129.png"></p><p>示例 1：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="number">6</span></span><br><span class="line">解释：</span><br><span class="line">子数组 [<span class="number">0</span>] 出现了 <span class="number">4</span> 次。</span><br><span class="line">子数组 [<span class="number">0</span>,<span class="number">0</span>] 出现了 <span class="number">2</span> 次。</span><br><span class="line">不存在长度大于 <span class="number">2</span> 的全 <span class="number">0</span> 子数组，所以我们返回 <span class="number">6</span> 。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">输出：<span class="number">9</span></span><br><span class="line">解释：</span><br><span class="line">子数组 [<span class="number">0</span>] 出现了 <span class="number">5</span> 次。</span><br><span class="line">子数组 [<span class="number">0</span>,<span class="number">0</span>] 出现了 <span class="number">3</span> 次。</span><br><span class="line">子数组 [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>] 出现了 <span class="number">1</span> 次。</span><br><span class="line">不存在长度大于 <span class="number">3</span> 的全 <span class="number">0</span> 子数组，所以我们返回 <span class="number">9</span> 。</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">2</span>,<span class="number">10</span>,<span class="number">2019</span>]</span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：没有全 <span class="number">0</span> 子数组，所以我们返回 <span class="number">0</span> 。</span><br></pre></td></tr></table></figure><h1>做法：<strong>统计连续 0 组成的长度 c，每个 c 可以贡献 c 个子数组</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> zeroFilledSubarray = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> val <span class="keyword">of</span> nums)</span><br><span class="line">        <span class="keyword">if</span> (val) c = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> ans += ++c;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/24/jN4roYnpXDELgI1.png" alt="6130.png"><br>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[<span class="string">&quot;NumberContainers&quot;</span>, <span class="string">&quot;find&quot;</span>, <span class="string">&quot;change&quot;</span>, <span class="string">&quot;change&quot;</span>, <span class="string">&quot;change&quot;</span>, <span class="string">&quot;change&quot;</span>, <span class="string">&quot;find&quot;</span>, <span class="string">&quot;change&quot;</span>, <span class="string">&quot;find&quot;</span>]</span><br><span class="line">[[], [<span class="number">10</span>], [<span class="number">2</span>, <span class="number">10</span>], [<span class="number">1</span>, <span class="number">10</span>], [<span class="number">3</span>, <span class="number">10</span>], [<span class="number">5</span>, <span class="number">10</span>], [<span class="number">10</span>], [<span class="number">1</span>, <span class="number">20</span>], [<span class="number">10</span>]]</span><br><span class="line">输出：</span><br><span class="line">[null, <span class="number">-1</span>, null, null, null, null, <span class="number">1</span>, null, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">NumberContainers nc = <span class="keyword">new</span> <span class="built_in">NumberContainers</span>();</span><br><span class="line">nc.<span class="built_in">find</span>(<span class="number">10</span>); <span class="comment">// 没有数字 10 ，所以返回 -1 。</span></span><br><span class="line">nc.<span class="built_in">change</span>(<span class="number">2</span>, <span class="number">10</span>); <span class="comment">// 容器中下标为 2 处填入数字 10 。</span></span><br><span class="line">nc.<span class="built_in">change</span>(<span class="number">1</span>, <span class="number">10</span>); <span class="comment">// 容器中下标为 1 处填入数字 10 。</span></span><br><span class="line">nc.<span class="built_in">change</span>(<span class="number">3</span>, <span class="number">10</span>); <span class="comment">// 容器中下标为 3 处填入数字 10 。</span></span><br><span class="line">nc.<span class="built_in">change</span>(<span class="number">5</span>, <span class="number">10</span>); <span class="comment">// 容器中下标为 5 处填入数字 10 。</span></span><br><span class="line">nc.<span class="built_in">find</span>(<span class="number">10</span>); <span class="comment">// 数字 10 所在的下标为 1 ，2 ，3 和 5 。因为最小下标为 1 ，所以返回 1 。</span></span><br><span class="line">nc.<span class="built_in">change</span>(<span class="number">1</span>, <span class="number">20</span>); <span class="comment">// 容器中下标为 1 处填入数字 20 。注意，下标 1 处之前为 10 ，现在被替换为 20 。</span></span><br><span class="line">nc.<span class="built_in">find</span>(<span class="number">10</span>); <span class="comment">// 数字 10 所在下标为 2 ，3 和 5 。最小下标为 2 ，所以返回 2 。</span></span><br></pre></td></tr></table></figure><h3 id="先看暴力解法">先看暴力解法:</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">NumberContainers</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">arr</span> = [];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; index </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">number</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">NumberContainers</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">change</span> = <span class="keyword">function</span>(<span class="params">index, number</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">arr</span>[index] = number;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">number</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">NumberContainers</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">find</span> = <span class="keyword">function</span>(<span class="params">number</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">arr</span>.<span class="title function_">indexOf</span>(number);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your NumberContainers object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * var obj = new NumberContainers()</span></span><br><span class="line"><span class="comment"> * obj.change(index,number)</span></span><br><span class="line"><span class="comment"> * var param_2 = obj.find(number)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="会直接超时：">会直接超时：</h3><p><img src="https://s2.loli.net/2022/07/24/adsQlI2Meo3zSVG.png" alt="超时"></p><h1>用优先队列即可：</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">NumberContainers</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">indToNum</span> = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">numToInd</span> = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; index </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">number</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">NumberContainers</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">change</span> = <span class="keyword">function</span>(<span class="params">index, number</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">indToNum</span>.<span class="title function_">set</span>(index,number)</span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="property">numToInd</span>.<span class="title function_">has</span>(number))&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">numToInd</span>.<span class="title function_">set</span>(number, <span class="keyword">new</span> <span class="title class_">MinPriorityQueue</span>())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">numToInd</span>.<span class="title function_">get</span>(number).<span class="title function_">enqueue</span>(index)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">number</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">NumberContainers</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">find</span> = <span class="keyword">function</span>(<span class="params">number</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="property">numToInd</span>.<span class="title function_">has</span>(number)) <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> q = <span class="variable language_">this</span>.<span class="property">numToInd</span>.<span class="title function_">get</span>(number)</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="title function_">isEmpty</span>())&#123;</span><br><span class="line">        <span class="keyword">let</span> top = q.<span class="title function_">front</span>().<span class="property">element</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">indToNum</span>.<span class="title function_">get</span>(top) === number)&#123;</span><br><span class="line">            <span class="keyword">return</span> top</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            q.<span class="title function_">dequeue</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your NumberContainers object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * var obj = new NumberContainers()</span></span><br><span class="line"><span class="comment"> * obj.change(index,number)</span></span><br><span class="line"><span class="comment"> * var param_2 = obj.find(number)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/25/hpAC6b71WdHvrYP.png" alt="6131.png"><br>示例 1：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：rolls = [<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>], k = <span class="number">4</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：所有长度为 <span class="number">1</span> 的骰子子序列 [<span class="number">1</span>] ，[<span class="number">2</span>] ，[<span class="number">3</span>] ，[<span class="number">4</span>] 都可以从原数组中得到。</span><br><span class="line">所有长度为 <span class="number">2</span> 的骰子子序列 [<span class="number">1</span>, <span class="number">1</span>] ，[<span class="number">1</span>, <span class="number">2</span>] ，... ，[<span class="number">4</span>, <span class="number">4</span>] 都可以从原数组中得到。</span><br><span class="line">子序列 [<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>] 无法从原数组中得到，所以我们返回 <span class="number">3</span> 。</span><br><span class="line">还有别的子序列也无法从原数组中得到。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：rolls = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>], k = <span class="number">2</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：所有长度为 <span class="number">1</span> 的子序列 [<span class="number">1</span>] ，[<span class="number">2</span>] 都可以从原数组中得到。</span><br><span class="line">子序列 [<span class="number">2</span>, <span class="number">1</span>] 无法从原数组中得到，所以我们返回 <span class="number">2</span> 。</span><br><span class="line">还有别的子序列也无法从原数组中得到，但 [<span class="number">2</span>, <span class="number">1</span>] 是最短的子序列。</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：rolls = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>], k = <span class="number">4</span></span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：子序列 [<span class="number">4</span>] 无法从原数组中得到，所以我们返回 <span class="number">1</span> 。</span><br><span class="line">还有别的子序列也无法从原数组中得到，但 [<span class="number">4</span>] 是最短的子序列。</span><br></pre></td></tr></table></figure><h1>做法：脑筋急转弯题，但是不想这样写，用线段树的做法没做出来，不写了，gg</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/07/24/YkzuALIDS42B8Ke.png&quot; alt=&quot;6128.png&quot;&gt;&lt;br&gt;
示例 1：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td </summary>
      
    
    
    
    <category term="LeetCode" scheme="http://example.com/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>weakMap 和 Map</title>
    <link href="http://example.com/post/4.html"/>
    <id>http://example.com/post/4.html</id>
    <published>2022-07-23T15:22:24.527Z</published>
    <updated>2022-07-23T16:04:11.408Z</updated>
    
    <content type="html"><![CDATA[<p>这个问题其实很经典哈，在春招那会就背过了，老八股文了，最近在看Vue3.0的源码（虽然现在在公司用的是React），看到 Reactive.ts 这块的源码的时候，居然真的发现了这个数据结构😊</p><p>源码如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createReactiveObject</span>(<span class="params"></span></span><br><span class="line"><span class="params">  target: Target,</span></span><br><span class="line"><span class="params">  isReadonly: <span class="built_in">boolean</span>,</span></span><br><span class="line"><span class="params">  baseHandlers: ProxyHandler&lt;<span class="built_in">any</span>&gt;,</span></span><br><span class="line"><span class="params">  collectionHandlers: ProxyHandler&lt;<span class="built_in">any</span>&gt;,</span></span><br><span class="line"><span class="params">  proxyMap: <span class="built_in">WeakMap</span>&lt;Target, <span class="built_in">any</span>&gt;</span></span><br><span class="line"><span class="params"></span>) ...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>能够看到这里使用了 <font color="red">WeakMap</font>，那为什么不使用 <font color="red">Map</font> 呢？？</p><h1>看两段代码：</h1><h2 id="第一段代码：">第一段代码：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"></span><br><span class="line">    (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> foo = &#123;</span><br><span class="line">            <span class="attr">foo</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        map.<span class="title function_">set</span>(foo, <span class="number">1</span>);</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">keys</span>().<span class="title function_">next</span>().<span class="property">value</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>首先定义一个 Map，接着定义一个立即执行函数，把 map 的 key 设为 foo 对象，值为 1</li><li>当这个自执行函数执行完了之后，我们能发现，仍然能打印这个 map 的 key，这个 foo 对象的引用还依然存在</li></ul><p>看结果：<br><img src="https://s2.loli.net/2022/07/23/2pkMgZwHb3uidjK.png" alt="map的key依然存在"></p><p>说明什么，这个 foo 的引用还存在的话，那说明JS的垃圾回收机制，不会把他从内存中移除</p><h2 id="再看看另一组代码：">再看看另一组代码：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> weakMap = <span class="keyword">new</span> <span class="title function_">weakMap</span>();</span><br><span class="line">    (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> bar = &#123;</span><br><span class="line">            <span class="attr">bar</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        weakMap.<span class="title function_">set</span>(bar, <span class="number">1</span>);</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(weakMap.<span class="title function_">keys</span>().<span class="title function_">next</span>().<span class="property">value</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>直接说结果：报错。</p><p>由于 weakMap，它的 key 是一个弱引用，它不影响JS垃圾回收机制的回收工作，所以说一旦立即执行函数结束之后，垃圾回收器就会把 bar 从内存中移除，所以我们无法再获取到这个 key</p><p>简单总结：</p><ol><li>map的key可以存放任何数据结构，而 weakMap 的key只能存放对象</li><li><font color="red">weakMap的key是弱引用，不影响垃圾回收机制的工作</font></li></ol><h2 id="weakMap的使用场景">weakMap的使用场景</h2><p>weakMap 经常用于存储那些只有当 ke y所引用的对象存在时才有价值的信息</p><p>再回过头来看 Vue3.0 的 Reactive.ts 的源码，这里的 weakMap 的 key 其实就是我们要代理的对象，这个对象如果在写的时候已经执行完了，那么正常的话应该是从内存中销毁的。算是一种性能上的优化吧，所以定义了 weakMap 这个数据结构</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这个问题其实很经典哈，在春招那会就背过了，老八股文了，最近在看Vue3.0的源码（虽然现在在公司用的是React），看到 Reactive.ts 这块的源码的时候，居然真的发现了这个数据结构😊&lt;/p&gt;
&lt;p&gt;源码如下：&lt;/p&gt;
&lt;figure class=&quot;highlig</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://example.com/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CSS设置宽高比</title>
    <link href="http://example.com/post/3.html"/>
    <id>http://example.com/post/3.html</id>
    <published>2022-07-21T13:40:15.976Z</published>
    <updated>2022-07-21T14:02:28.903Z</updated>
    
    <content type="html"><![CDATA[<p>今天学到了一个CSS的属性：<font color="blue"><strong>aspect-ratio</strong></font>，它可以控制容器的宽高比例</p><p>举个例子：</p><p>CSS:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">background</span>: aquamarine;</span><br><span class="line">    aspect-ratio: <span class="number">1</span>/<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HTML:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">        this is ACM</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如图:</p><p><img src="https://s2.loli.net/2022/07/21/KHdQEr34oRYFJcz.png" alt="img"></p><p>当我们把这个属性注释掉，再看看效果</p><p><img src="https://s2.loli.net/2022/07/21/biHysVfU4xzZPNM.png" alt="注释之后.png"></p><p>所以可以发现这个属性可以让容易的宽和高保持在一个比例，那么为了方便测试，我们给<font color="blue"> wrapper </font> 加一个 <strong>contenteditable</strong>属性来测试一下</p><p><strong>注：这个contenteditable=&quot;true&quot;可以让div+css可以相当于Input一样，可以在里面编辑文字</strong><br>CSS:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">background</span>: aquamarine;</span><br><span class="line">    aspect-ratio: <span class="number">1</span>/<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HTML:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span> <span class="attr">contenteditable</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        this is ACM</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/21/YWkFTo7x2Hvn4gy.png" alt="过程.png"></p><p>可以看出随着内容的改变，容器的宽高会始终保持这么一个1：1的比例，或者2：1、3：1、2.5：1等等，都是一样的效果</p><p>兼容性：除了IE浏览器…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天学到了一个CSS的属性：&lt;font color=&quot;blue&quot;&gt;&lt;strong&gt;aspect-ratio&lt;/strong&gt;&lt;/font&gt;，它可以控制容器的宽高比例&lt;/p&gt;
&lt;p&gt;举个例子：&lt;/p&gt;
&lt;p&gt;CSS:&lt;/p&gt;
&lt;figure class=&quot;highlight </summary>
      
    
    
    
    <category term="CSS" scheme="http://example.com/categories/CSS/"/>
    
    
    <category term="CSS" scheme="http://example.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-第 302 场周赛</title>
    <link href="http://example.com/post/2.html"/>
    <id>http://example.com/post/2.html</id>
    <published>2022-07-17T15:00:46.094Z</published>
    <updated>2022-07-21T14:05:14.015Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/07/21/lnNcUw2PMjHfeAO.png" alt="6120"></p><p>示例 1：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line">输出：[<span class="number">3</span>,<span class="number">1</span>]</span><br><span class="line">解释：</span><br><span class="line">nums[<span class="number">0</span>] 和 nums[<span class="number">3</span>] 形成一个数对，并从 nums 中移除，nums = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>] 。</span><br><span class="line">nums[<span class="number">0</span>] 和 nums[<span class="number">2</span>] 形成一个数对，并从 nums 中移除，nums = [<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>] 。</span><br><span class="line">nums[<span class="number">0</span>] 和 nums[<span class="number">1</span>] 形成一个数对，并从 nums 中移除，nums = [<span class="number">2</span>] 。</span><br><span class="line">无法形成更多数对。总共形成 <span class="number">3</span> 个数对，nums 中剩下 <span class="number">1</span> 个数字。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">0</span>]</span><br><span class="line">解释：nums[<span class="number">0</span>] 和 nums[<span class="number">1</span>] 形成一个数对，并从 nums 中移除，nums = [] 。</span><br><span class="line">无法形成更多数对。总共形成 <span class="number">1</span> 个数对，nums 中剩下 <span class="number">0</span> 个数字。</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">0</span>]</span><br><span class="line">输出：[<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">解释：无法形成数对，nums 中剩下 <span class="number">1</span> 个数字。</span><br></pre></td></tr></table></figure><p>做法：<strong>哈希表存储一下，模拟一下即可</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> numberOfPairs = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> last = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> val <span class="keyword">of</span> nums)&#123;</span><br><span class="line">        map.<span class="title function_">set</span>(val, (map.<span class="title function_">get</span>(val) || <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> val <span class="keyword">of</span> map)&#123;</span><br><span class="line">        res += <span class="title class_">Math</span>.<span class="title function_">floor</span>(val[<span class="number">1</span>] / <span class="number">2</span>);</span><br><span class="line">        last += val[<span class="number">1</span>] % <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [res, last];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/21/cGSBkgtjV74exPv.png" alt="6164"></p><p>示例 1：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">18</span>,<span class="number">43</span>,<span class="number">36</span>,<span class="number">13</span>,<span class="number">7</span>]</span><br><span class="line">输出：<span class="number">54</span></span><br><span class="line">解释：满足条件的数对 (i, j) 为：</span><br><span class="line">- (<span class="number">0</span>, <span class="number">2</span>) ，两个数字的数位和都是 <span class="number">9</span> ，相加得到 <span class="number">18</span> + <span class="number">36</span> = <span class="number">54</span> 。</span><br><span class="line">- (<span class="number">1</span>, <span class="number">4</span>) ，两个数字的数位和都是 <span class="number">7</span> ，相加得到 <span class="number">43</span> + <span class="number">7</span> = <span class="number">50</span> 。</span><br><span class="line">所以可以获得的最大和是 <span class="number">54</span> 。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">10</span>,<span class="number">12</span>,<span class="number">19</span>,<span class="number">14</span>]</span><br><span class="line">输出：<span class="number">-1</span></span><br><span class="line">解释：不存在满足条件的数对，返回 <span class="number">-1</span> 。</span><br></pre></td></tr></table></figure><p>做法：<strong>当map值已经存在， 取map的最大值 跟当前值的和 与 max 比较</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">f</span> = (<span class="params">n</span>) =&gt;&#123;</span><br><span class="line">   <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">while</span>(n)&#123;</span><br><span class="line">      sum += n % <span class="number">10</span>;</span><br><span class="line">      n = n / <span class="number">10</span> &gt;&gt; <span class="number">0</span>;</span><br><span class="line">   &#125; </span><br><span class="line">   <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> maximumSum = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    <span class="keyword">let</span> max = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> n <span class="keyword">of</span> nums)&#123;</span><br><span class="line">        <span class="keyword">const</span> num = <span class="title function_">f</span>(n);</span><br><span class="line">        <span class="keyword">if</span>(map.<span class="title function_">has</span>(num))&#123;</span><br><span class="line">            max = <span class="title class_">Math</span>.<span class="title function_">max</span>(max, map.<span class="title function_">get</span>(num) + n);</span><br><span class="line">            map.<span class="title function_">set</span>(num,<span class="title class_">Math</span>.<span class="title function_">max</span>(map.<span class="title function_">get</span>(num), n));</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            map.<span class="title function_">set</span>(num, n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/21/tcz58TQhEJ3FAnU.png" alt="6121"></p><p>示例 1：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="string">&quot;102&quot;</span>,<span class="string">&quot;473&quot;</span>,<span class="string">&quot;251&quot;</span>,<span class="string">&quot;814&quot;</span>], queries = [[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">2</span>]]</span><br><span class="line">输出：[<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>]</span><br><span class="line">解释：</span><br><span class="line"><span class="number">1.</span> 裁剪到只剩 <span class="number">1</span> 个数位后，nums = [<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;4&quot;</span>] 。最小的数字是 <span class="number">1</span> ，下标为 <span class="number">2</span> 。</span><br><span class="line"><span class="number">2.</span> 裁剪到剩 <span class="number">3</span> 个数位后，nums 没有变化。第 <span class="number">2</span> 小的数字是 <span class="number">251</span> ，下标为 <span class="number">2</span> 。</span><br><span class="line"><span class="number">3.</span> 裁剪到剩 <span class="number">2</span> 个数位后，nums = [<span class="string">&quot;02&quot;</span>,<span class="string">&quot;73&quot;</span>,<span class="string">&quot;51&quot;</span>,<span class="string">&quot;14&quot;</span>] 。第 <span class="number">4</span> 小的数字是 <span class="number">73</span> ，下标为 <span class="number">1</span> 。</span><br><span class="line"><span class="number">4.</span> 裁剪到剩 <span class="number">2</span> 个数位后，最小数字是 <span class="number">2</span> ，下标为 <span class="number">0</span> 。</span><br><span class="line">   注意，裁剪后数字 <span class="string">&quot;02&quot;</span> 值为 <span class="number">2</span> 。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="string">&quot;24&quot;</span>,<span class="string">&quot;37&quot;</span>,<span class="string">&quot;96&quot;</span>,<span class="string">&quot;04&quot;</span>], queries = [[<span class="number">2</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">2</span>]]</span><br><span class="line">输出：[<span class="number">3</span>,<span class="number">0</span>]</span><br><span class="line">解释：</span><br><span class="line"><span class="number">1.</span> 裁剪到剩 <span class="number">1</span> 个数位，nums = [<span class="string">&quot;4&quot;</span>,<span class="string">&quot;7&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;4&quot;</span>] 。第 <span class="number">2</span> 小的数字是 <span class="number">4</span> ，下标为 <span class="number">3</span> 。</span><br><span class="line">   有两个 <span class="number">4</span> ，下标为 <span class="number">0</span> 的 <span class="number">4</span> 视为小于下标为 <span class="number">3</span> 的 <span class="number">4</span> 。</span><br><span class="line"><span class="number">2.</span> 裁剪到剩 <span class="number">2</span> 个数位，nums 不变。第二小的数字是 <span class="number">24</span> ，下标为 <span class="number">0</span> 。</span><br></pre></td></tr></table></figure><p>做法：<strong>仿照C++里的结构体自定义排序写法，写一遍JS版本的就可以了</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[][]</span>&#125; <span class="variable">queries</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> smallestTrimmedNumbers = <span class="keyword">function</span>(<span class="params">nums, queries</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">node</span> (val, idx) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">v</span> = val;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">id</span> = idx;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line">  <span class="keyword">let</span> cur = [], len = nums.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> q <span class="keyword">of</span> queries) &#123;</span><br><span class="line">    <span class="keyword">let</span> n = q[<span class="number">1</span>], k = q[<span class="number">0</span>];</span><br><span class="line">    cur = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> last = nums[i].<span class="title function_">substr</span>(-q[<span class="number">1</span>]);</span><br><span class="line">      <span class="keyword">let</span> no = <span class="keyword">new</span> <span class="title function_">node</span>(last, i);</span><br><span class="line">      cur.<span class="title function_">push</span>(no);</span><br><span class="line">    &#125;</span><br><span class="line">    cur.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(a.<span class="property">v</span> == b.<span class="property">v</span>) <span class="keyword">return</span> a.<span class="property">id</span> - b.<span class="property">id</span>;</span><br><span class="line">      <span class="keyword">return</span> (a.<span class="property">v</span> &lt; b.<span class="property">v</span>) == <span class="literal">true</span> ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    res.<span class="title function_">push</span>(cur[k - <span class="number">1</span>].<span class="property">id</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/21/RLqtUYckZpHrhGE.png" alt="6122"></p><p>示例 1：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>], numsDivide = [<span class="number">9</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">15</span>]</span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：</span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>] 中最小元素是 <span class="number">2</span> ，它无法整除 numsDivide 中所有元素。</span><br><span class="line">我们从 nums 中删除 <span class="number">2</span> 个大小为 <span class="number">2</span> 的元素，得到 nums = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>] 。</span><br><span class="line">[<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>] 中最小元素为 <span class="number">3</span> ，它可以整除 numsDivide 中所有元素。</span><br><span class="line">可以证明 <span class="number">2</span> 是最少删除次数。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">4</span>,<span class="number">3</span>,<span class="number">6</span>], numsDivide = [<span class="number">8</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">10</span>]</span><br><span class="line">输出：<span class="number">-1</span></span><br><span class="line">解释：</span><br><span class="line">我们想 nums 中的最小元素可以整除 numsDivide 中的所有元素。</span><br><span class="line">没有任何办法可以达到这一目的。</span><br></pre></td></tr></table></figure><p>做法：用一下21世纪最伟大精妙的 gcd 算法，然后模拟即可，这题居然是 <font color="red">hard</font> ？？？？直接秒了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">numsDivide</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> gcd = <span class="keyword">function</span>(<span class="params">a, b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> b == <span class="number">0</span> ? a : <span class="title function_">gcd</span>(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> minOperations = <span class="keyword">function</span>(<span class="params">nums, numsDivide</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> len = nums.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> val <span class="keyword">of</span> numsDivide) &#123;</span><br><span class="line">        res = <span class="title function_">gcd</span>(val, res);</span><br><span class="line">    &#125;</span><br><span class="line">    nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (res % nums[i] == <span class="number">0</span>) <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/07/21/lnNcUw2PMjHfeAO.png&quot; alt=&quot;6120&quot;&gt;&lt;/p&gt;
&lt;p&gt;示例 1：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c</summary>
      
    
    
    
    <category term="LeetCode" scheme="http://example.com/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>摩尔投票法</title>
    <link href="http://example.com/post/1.html"/>
    <id>http://example.com/post/1.html</id>
    <published>2022-07-17T08:03:58.005Z</published>
    <updated>2022-07-17T08:07:55.805Z</updated>
    
    <content type="html"><![CDATA[<p>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字<br>示例 1:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span>]</span><br><span class="line">输出: <span class="number">2</span></span><br></pre></td></tr></table></figure><p>进阶：尝试设计时间复杂度为 O(n)、空间复杂度为 O(1) 的算法解决此问题</p><h3 id="此题有三种解法">此题有三种解法</h3><p>1、排序取中位数，时间O(nlogn)，空间O(1)<br>因为一个数字如果在数组中出现了超过一半次数，那么从小到大排序后，中间那个元素必定是答案</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Cpp</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">majorityElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> nums[nums.<span class="built_in">size</span>()/<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2、哈希表，时间O(n)，空间O(n/2)<br>先遍历数组存储每个数字出现的次数，然后遍历哈希表，得出答案</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//JavaScript</span></span><br><span class="line"><span class="keyword">var</span> majorityElement = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    <span class="keyword">let</span> ans = <span class="number">1</span>;</span><br><span class="line">    nums.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!map.<span class="title function_">has</span>(item))&#123;</span><br><span class="line">            map.<span class="title function_">set</span>(item, <span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> cnt = map.<span class="title function_">get</span>(item);</span><br><span class="line">            ans = <span class="title class_">Math</span>.<span class="title function_">max</span>(ans, ++cnt);</span><br><span class="line">            map.<span class="title function_">set</span>(item, cnt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> [k, v] <span class="keyword">of</span> map)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v == ans)&#123;</span><br><span class="line">            <span class="keyword">return</span> k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>3、摩尔投票法</p><p>一个数字如果在数组中出现了一半次数以上，那么它必然比其他所有数字出现的次数加起来至少还要多2次，我们用cnt表示某个数出现的次数，用val表示这个数</p><p>从头开始遍历，如果cnt为0，则把它置为1，令val等于这个数，若cnt不等于0，此时如果val和当前这个值一样，则cnt++，否则cnt–，那么这样，当遍历完之后，val保存的一定是要的那个答案</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// golang</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">majorityElement</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    cnt, val := <span class="number">0</span>, nums[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        <span class="keyword">if</span>(cnt == <span class="number">0</span>)&#123;</span><br><span class="line">            cnt = <span class="number">1</span></span><br><span class="line">            val = v</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(val == v)&#123;</span><br><span class="line">                cnt++</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cnt--</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字&lt;br&gt;
示例 1:&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="摩尔投票法" scheme="http://example.com/tags/%E6%91%A9%E5%B0%94%E6%8A%95%E7%A5%A8%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>线段树</title>
    <link href="http://example.com/post/48555.html"/>
    <id>http://example.com/post/48555.html</id>
    <published>2022-07-14T15:21:49.521Z</published>
    <updated>2022-07-21T13:39:43.130Z</updated>
    
    <content type="html"><![CDATA[<p>线段树模板题，先介绍一下，什么是线段树</p><ul><li>线段树, 是数据结构从入门到进阶的一条必经之路</li><li>线段树, 是高阶数据结构的基础</li><li>线段树, 是ACMer萌新到大佬的一个坎</li><li>线段树, 是代码量剧增的一个毒瘤</li><li>线段树, 是区间性质的集合体</li></ul><p><img src="https://s2.loli.net/2022/07/21/TkWc7vb8xuNgIhG.webp" alt="线段树.webp"></p><p>简洁点来说一下这个数据结构，实际上就是一个树形结构，上面的节点表示一个区间，父亲节点表示的区间是左右儿子相加。常用来解决区间问题，时间复杂度为O(logN)</p><p>题目：给定 n 个数组成的一个数列，规定有两种操作，一是修改某个元素，二是求子数列 [a,b] 的连续和。</p><h2 id="输入格式">输入格式</h2><p>第一行包含两个整数 n 和 m，分别表示数的个数和操作次数。<br>第二行包含 n 个整数，表示完整数列。</p><p>接下来 m 行，每行包含三个整数 k, a, b （k = 0，表示求子数列[a, b]的和；k = 1，表示第 a 个数加 b）。</p><p>数列从 1 开始计数。</p><h2 id="输出格式">输出格式</h2><p>输出若干行数字，表示 k = 0 时，对应的子数列 [a, b] 的连续和。</p><h2 id="数据范围">数据范围</h2><p>1 ≤ n ≤ 100000,<br>1 ≤ m ≤ 100000，<br>1 ≤ a ≤ b ≤n,<br>数据保证在任何时候，数列中所有元素之和均在 int 范围内。</p><p>直接贴代码了，如何建树、查询、更改都写注释了，大家应该能看懂</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线段树的构建</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; tree 线段树数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; arr 原数组 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; node 当前线段树数组中所在节点的下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; start 起始位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; end 结束位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> build_tree = <span class="keyword">function</span> (<span class="params">tree, arr, node, start, end</span>) &#123;</span><br><span class="line">    <span class="comment">// 边界条件</span></span><br><span class="line">    <span class="keyword">if</span> (start === end) &#123;</span><br><span class="line">        tree[node] = arr[start];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// mid为中间值，线段树每个节点左边为 start ~ mid，右边为 mid + 1 ~ end</span></span><br><span class="line">        <span class="keyword">const</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>((start + end) / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">const</span> left_node = <span class="number">2</span> * node + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">const</span> right_node = <span class="number">2</span> * node + <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 分别递归左子树和右子树</span></span><br><span class="line">        <span class="title function_">build_tree</span>(tree, arr, left_node, start, mid);</span><br><span class="line">        <span class="title function_">build_tree</span>(tree, arr, right_node, mid + <span class="number">1</span>, end);</span><br><span class="line">        <span class="comment">// 最后把左节点的值加上右节点的值就可以得出当前节点的值</span></span><br><span class="line">        tree[node] = tree[left_node] + tree[right_node];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; tree 线段树数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; arr 原数组 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; node 当前线段树数组中所在节点的下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; start 起始位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; end 结束位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; index 更新的节点的下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; value 更新之后的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> update_tree = <span class="keyword">function</span> (<span class="params">tree, arr, node, start, end, index, value</span>) &#123;</span><br><span class="line">    <span class="comment">// 边界条件，范围只有一个数字，代表一定到达了这个点上</span></span><br><span class="line">    <span class="keyword">if</span> (start === end) &#123;</span><br><span class="line">        tree[node] += value;</span><br><span class="line">        arr[index] += value;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>((start + end) / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">const</span> left_node = <span class="number">2</span> * node + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">const</span> right_node = <span class="number">2</span> * node + <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= start &amp;&amp; index &lt;= mid) &#123;</span><br><span class="line">            <span class="comment">// 更新左分支</span></span><br><span class="line">            <span class="title function_">update_tree</span>(tree, arr, left_node, start, mid, index, value);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 更新右分支</span></span><br><span class="line">            <span class="title function_">update_tree</span>(tree, arr, right_node, mid + <span class="number">1</span>, end, index, value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 改完left_node或right_node之后更新一下tree[node]</span></span><br><span class="line">        tree[node] = tree[left_node] + tree[right_node];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 区间查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; tree 线段树数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; arr 原数组 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; node 当前线段树数组中所在节点的下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; start 起始位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; end 结束位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; left 左边界</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; right 右边界</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> query_tree = <span class="keyword">function</span> (<span class="params">tree, arr, node, start, end, left, right</span>) &#123;</span><br><span class="line">    <span class="comment">// 要查询的区间不在左子树或右子树上</span></span><br><span class="line">    <span class="keyword">if</span> (right &lt; start || left &gt; end) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (start === end) &#123;</span><br><span class="line">        <span class="comment">// 正好计算到叶节点上</span></span><br><span class="line">        <span class="keyword">return</span> tree[node];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left &lt;= start &amp;&amp; end &lt;= right) &#123;</span><br><span class="line">        <span class="comment">// 目标区间包含要查询的区间, 直接返回节点值 </span></span><br><span class="line">        <span class="keyword">return</span> tree[node];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>((start + end) / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">const</span> left_node = <span class="number">2</span> * node + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">const</span> right_node = <span class="number">2</span> * node + <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">const</span> sum_left = <span class="title function_">query_tree</span>(tree, arr, left_node, start, mid, left, right);</span><br><span class="line">        <span class="keyword">const</span> sum_right = <span class="title function_">query_tree</span>(tree, arr, right_node, mid + <span class="number">1</span>, end, left, right);</span><br><span class="line">        <span class="keyword">return</span> sum_left + sum_right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cin = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res = [];</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line"><span class="keyword">const</span> tree = [];</span><br><span class="line"></span><br><span class="line"><span class="title function_">build_tree</span>(tree, arr, <span class="number">0</span>, <span class="number">0</span>, arr.<span class="property">length</span> - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> val <span class="keyword">of</span> cin) &#123;</span><br><span class="line">    <span class="keyword">if</span> (val[<span class="number">0</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="title function_">update_tree</span>(tree, arr, <span class="number">0</span>, <span class="number">0</span>, arr.<span class="property">length</span> - <span class="number">1</span>, val[<span class="number">1</span>] - <span class="number">1</span>, val[<span class="number">2</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">push</span>(<span class="title function_">query_tree</span>(tree, arr, <span class="number">0</span>, <span class="number">0</span>, arr.<span class="property">length</span> - <span class="number">1</span>, val[<span class="number">1</span>] - <span class="number">1</span>, val[<span class="number">2</span>] - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;线段树模板题，先介绍一下，什么是线段树&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线段树, 是数据结构从入门到进阶的一条必经之路&lt;/li&gt;
&lt;li&gt;线段树, 是高阶数据结构的基础&lt;/li&gt;
&lt;li&gt;线段树, 是ACMer萌新到大佬的一个坎&lt;/li&gt;
&lt;li&gt;线段树, 是代码量剧增的一个毒瘤</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="线段树" scheme="http://example.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
</feed>
