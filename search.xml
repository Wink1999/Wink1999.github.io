<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LeetCode-第 302 场周赛</title>
      <link href="/post/2.html"/>
      <url>/post/2.html</url>
      
        <content type="html"><![CDATA[<img src="/post/2/6120.png" class width="6120"><p>示例 1：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line">输出：[<span class="number">3</span>,<span class="number">1</span>]</span><br><span class="line">解释：</span><br><span class="line">nums[<span class="number">0</span>] 和 nums[<span class="number">3</span>] 形成一个数对，并从 nums 中移除，nums = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>] 。</span><br><span class="line">nums[<span class="number">0</span>] 和 nums[<span class="number">2</span>] 形成一个数对，并从 nums 中移除，nums = [<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>] 。</span><br><span class="line">nums[<span class="number">0</span>] 和 nums[<span class="number">1</span>] 形成一个数对，并从 nums 中移除，nums = [<span class="number">2</span>] 。</span><br><span class="line">无法形成更多数对。总共形成 <span class="number">3</span> 个数对，nums 中剩下 <span class="number">1</span> 个数字。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">0</span>]</span><br><span class="line">解释：nums[<span class="number">0</span>] 和 nums[<span class="number">1</span>] 形成一个数对，并从 nums 中移除，nums = [] 。</span><br><span class="line">无法形成更多数对。总共形成 <span class="number">1</span> 个数对，nums 中剩下 <span class="number">0</span> 个数字。</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">0</span>]</span><br><span class="line">输出：[<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">解释：无法形成数对，nums 中剩下 <span class="number">1</span> 个数字。</span><br></pre></td></tr></table></figure><p>做法：<strong>哈希表存储一下，模拟一下即可</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> numberOfPairs = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> last = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> val <span class="keyword">of</span> nums)&#123;</span><br><span class="line">        map.<span class="title function_">set</span>(val, (map.<span class="title function_">get</span>(val) || <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> val <span class="keyword">of</span> map)&#123;</span><br><span class="line">        res += <span class="title class_">Math</span>.<span class="title function_">floor</span>(val[<span class="number">1</span>] / <span class="number">2</span>);</span><br><span class="line">        last += val[<span class="number">1</span>] % <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [res, last];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/post/2/6164.png" class width="6164"><p>示例 1：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">18</span>,<span class="number">43</span>,<span class="number">36</span>,<span class="number">13</span>,<span class="number">7</span>]</span><br><span class="line">输出：<span class="number">54</span></span><br><span class="line">解释：满足条件的数对 (i, j) 为：</span><br><span class="line">- (<span class="number">0</span>, <span class="number">2</span>) ，两个数字的数位和都是 <span class="number">9</span> ，相加得到 <span class="number">18</span> + <span class="number">36</span> = <span class="number">54</span> 。</span><br><span class="line">- (<span class="number">1</span>, <span class="number">4</span>) ，两个数字的数位和都是 <span class="number">7</span> ，相加得到 <span class="number">43</span> + <span class="number">7</span> = <span class="number">50</span> 。</span><br><span class="line">所以可以获得的最大和是 <span class="number">54</span> 。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">10</span>,<span class="number">12</span>,<span class="number">19</span>,<span class="number">14</span>]</span><br><span class="line">输出：<span class="number">-1</span></span><br><span class="line">解释：不存在满足条件的数对，返回 <span class="number">-1</span> 。</span><br></pre></td></tr></table></figure><p>做法：<strong>当map值已经存在， 取map的最大值 跟当前值的和 与 max 比较</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">f</span> = (<span class="params">n</span>) =&gt;&#123;</span><br><span class="line">   <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">while</span>(n)&#123;</span><br><span class="line">      sum += n % <span class="number">10</span>;</span><br><span class="line">      n = n / <span class="number">10</span> &gt;&gt; <span class="number">0</span>;</span><br><span class="line">   &#125; </span><br><span class="line">   <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> maximumSum = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    <span class="keyword">let</span> max = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> n <span class="keyword">of</span> nums)&#123;</span><br><span class="line">        <span class="keyword">const</span> num = <span class="title function_">f</span>(n);</span><br><span class="line">        <span class="keyword">if</span>(map.<span class="title function_">has</span>(num))&#123;</span><br><span class="line">            max = <span class="title class_">Math</span>.<span class="title function_">max</span>(max, map.<span class="title function_">get</span>(num) + n);</span><br><span class="line">            map.<span class="title function_">set</span>(num,<span class="title class_">Math</span>.<span class="title function_">max</span>(map.<span class="title function_">get</span>(num), n));</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            map.<span class="title function_">set</span>(num, n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/post/2/6121.png" class width="6121"><p>示例 1：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="string">&quot;102&quot;</span>,<span class="string">&quot;473&quot;</span>,<span class="string">&quot;251&quot;</span>,<span class="string">&quot;814&quot;</span>], queries = [[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">2</span>]]</span><br><span class="line">输出：[<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>]</span><br><span class="line">解释：</span><br><span class="line"><span class="number">1.</span> 裁剪到只剩 <span class="number">1</span> 个数位后，nums = [<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;4&quot;</span>] 。最小的数字是 <span class="number">1</span> ，下标为 <span class="number">2</span> 。</span><br><span class="line"><span class="number">2.</span> 裁剪到剩 <span class="number">3</span> 个数位后，nums 没有变化。第 <span class="number">2</span> 小的数字是 <span class="number">251</span> ，下标为 <span class="number">2</span> 。</span><br><span class="line"><span class="number">3.</span> 裁剪到剩 <span class="number">2</span> 个数位后，nums = [<span class="string">&quot;02&quot;</span>,<span class="string">&quot;73&quot;</span>,<span class="string">&quot;51&quot;</span>,<span class="string">&quot;14&quot;</span>] 。第 <span class="number">4</span> 小的数字是 <span class="number">73</span> ，下标为 <span class="number">1</span> 。</span><br><span class="line"><span class="number">4.</span> 裁剪到剩 <span class="number">2</span> 个数位后，最小数字是 <span class="number">2</span> ，下标为 <span class="number">0</span> 。</span><br><span class="line">   注意，裁剪后数字 <span class="string">&quot;02&quot;</span> 值为 <span class="number">2</span> 。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="string">&quot;24&quot;</span>,<span class="string">&quot;37&quot;</span>,<span class="string">&quot;96&quot;</span>,<span class="string">&quot;04&quot;</span>], queries = [[<span class="number">2</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">2</span>]]</span><br><span class="line">输出：[<span class="number">3</span>,<span class="number">0</span>]</span><br><span class="line">解释：</span><br><span class="line"><span class="number">1.</span> 裁剪到剩 <span class="number">1</span> 个数位，nums = [<span class="string">&quot;4&quot;</span>,<span class="string">&quot;7&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;4&quot;</span>] 。第 <span class="number">2</span> 小的数字是 <span class="number">4</span> ，下标为 <span class="number">3</span> 。</span><br><span class="line">   有两个 <span class="number">4</span> ，下标为 <span class="number">0</span> 的 <span class="number">4</span> 视为小于下标为 <span class="number">3</span> 的 <span class="number">4</span> 。</span><br><span class="line"><span class="number">2.</span> 裁剪到剩 <span class="number">2</span> 个数位，nums 不变。第二小的数字是 <span class="number">24</span> ，下标为 <span class="number">0</span> 。</span><br></pre></td></tr></table></figure><p>做法：<strong>仿照C++里的结构体自定义排序写法，写一遍JS版本的就可以了</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[][]</span>&#125; <span class="variable">queries</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> smallestTrimmedNumbers = <span class="keyword">function</span>(<span class="params">nums, queries</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">node</span> (val, idx) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">v</span> = val;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">id</span> = idx;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line">  <span class="keyword">let</span> cur = [], len = nums.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> q <span class="keyword">of</span> queries) &#123;</span><br><span class="line">    <span class="keyword">let</span> n = q[<span class="number">1</span>], k = q[<span class="number">0</span>];</span><br><span class="line">    cur = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> last = nums[i].<span class="title function_">substr</span>(-q[<span class="number">1</span>]);</span><br><span class="line">      <span class="keyword">let</span> no = <span class="keyword">new</span> <span class="title function_">node</span>(last, i);</span><br><span class="line">      cur.<span class="title function_">push</span>(no);</span><br><span class="line">    &#125;</span><br><span class="line">    cur.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(a.<span class="property">v</span> == b.<span class="property">v</span>) <span class="keyword">return</span> a.<span class="property">id</span> - b.<span class="property">id</span>;</span><br><span class="line">      <span class="keyword">return</span> (a.<span class="property">v</span> &lt; b.<span class="property">v</span>) == <span class="literal">true</span> ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    res.<span class="title function_">push</span>(cur[k - <span class="number">1</span>].<span class="property">id</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/post/2/6122.png" class width="6122"><p>示例 1：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>], numsDivide = [<span class="number">9</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">15</span>]</span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：</span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>] 中最小元素是 <span class="number">2</span> ，它无法整除 numsDivide 中所有元素。</span><br><span class="line">我们从 nums 中删除 <span class="number">2</span> 个大小为 <span class="number">2</span> 的元素，得到 nums = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>] 。</span><br><span class="line">[<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>] 中最小元素为 <span class="number">3</span> ，它可以整除 numsDivide 中所有元素。</span><br><span class="line">可以证明 <span class="number">2</span> 是最少删除次数。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">4</span>,<span class="number">3</span>,<span class="number">6</span>], numsDivide = [<span class="number">8</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">10</span>]</span><br><span class="line">输出：<span class="number">-1</span></span><br><span class="line">解释：</span><br><span class="line">我们想 nums 中的最小元素可以整除 numsDivide 中的所有元素。</span><br><span class="line">没有任何办法可以达到这一目的。</span><br></pre></td></tr></table></figure><p>做法：用一下21世纪最伟大精妙的 gcd 算法，然后模拟即可，这题居然是 <font color="red">hard</font> ？？？？直接秒了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">numsDivide</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> gcd = <span class="keyword">function</span>(<span class="params">a, b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> b == <span class="number">0</span> ? a : <span class="title function_">gcd</span>(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> minOperations = <span class="keyword">function</span>(<span class="params">nums, numsDivide</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> len = nums.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> val <span class="keyword">of</span> numsDivide) &#123;</span><br><span class="line">        res = <span class="title function_">gcd</span>(val, res);</span><br><span class="line">    &#125;</span><br><span class="line">    nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (res % nums[i] == <span class="number">0</span>) <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>摩尔投票法</title>
      <link href="/post/1.html"/>
      <url>/post/1.html</url>
      
        <content type="html"><![CDATA[<p>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字<br>示例 1:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span>]</span><br><span class="line">输出: <span class="number">2</span></span><br></pre></td></tr></table></figure><p>进阶：尝试设计时间复杂度为 O(n)、空间复杂度为 O(1) 的算法解决此问题</p><h3 id="此题有三种解法"><a href="#此题有三种解法" class="headerlink" title="此题有三种解法"></a>此题有三种解法</h3><p>1、排序取中位数，时间O(nlogn)，空间O(1)<br>因为一个数字如果在数组中出现了超过一半次数，那么从小到大排序后，中间那个元素必定是答案</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Cpp</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">majorityElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> nums[nums.<span class="built_in">size</span>()/<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2、哈希表，时间O(n)，空间O(n&#x2F;2)<br>先遍历数组存储每个数字出现的次数，然后遍历哈希表，得出答案</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//JavaScript</span></span><br><span class="line"><span class="keyword">var</span> majorityElement = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    <span class="keyword">let</span> ans = <span class="number">1</span>;</span><br><span class="line">    nums.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!map.<span class="title function_">has</span>(item))&#123;</span><br><span class="line">            map.<span class="title function_">set</span>(item, <span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> cnt = map.<span class="title function_">get</span>(item);</span><br><span class="line">            ans = <span class="title class_">Math</span>.<span class="title function_">max</span>(ans, ++cnt);</span><br><span class="line">            map.<span class="title function_">set</span>(item, cnt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> [k, v] <span class="keyword">of</span> map)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v == ans)&#123;</span><br><span class="line">            <span class="keyword">return</span> k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>3、摩尔投票法</p><p>一个数字如果在数组中出现了一半次数以上，那么它必然比其他所有数字出现的次数加起来至少还要多2次，我们用cnt表示某个数出现的次数，用val表示这个数</p><p>从头开始遍历，如果cnt为0，则把它置为1，令val等于这个数，若cnt不等于0，此时如果val和当前这个值一样，则cnt++，否则cnt–，那么这样，当遍历完之后，val保存的一定是要的那个答案</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// golang</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">majorityElement</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    cnt, val := <span class="number">0</span>, nums[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        <span class="keyword">if</span>(cnt == <span class="number">0</span>)&#123;</span><br><span class="line">            cnt = <span class="number">1</span></span><br><span class="line">            val = v</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(val == v)&#123;</span><br><span class="line">                cnt++</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cnt--</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 摩尔投票法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树</title>
      <link href="/post/48555.html"/>
      <url>/post/48555.html</url>
      
        <content type="html"><![CDATA[<p>线段树模板题，先介绍一下，什么是线段树</p><ul><li>线段树, 是数据结构从入门到进阶的一条必经之路</li><li>线段树, 是高阶数据结构的基础</li><li>线段树, 是ACMer萌新到大佬的一个坎</li><li>线段树, 是代码量剧增的一个毒瘤</li><li>线段树, 是区间性质的集合体</li></ul><img src="/post/48555/%E7%BA%BF%E6%AE%B5%E6%A0%91.webp" class title="线段树"><p>简洁点来说一下这个数据结构，实际上就是一个树形结构，上面的节点表示一个区间，父亲节点表示的区间是左右儿子相加。常用来解决区间问题，时间复杂度为O(logN)</p><p>题目：给定 n 个数组成的一个数列，规定有两种操作，一是修改某个元素，二是求子数列 [a,b] 的连续和。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行包含两个整数 n 和 m，分别表示数的个数和操作次数。<br>第二行包含 n 个整数，表示完整数列。</p><p>接下来 m 行，每行包含三个整数 k, a, b （k &#x3D; 0，表示求子数列[a, b]的和；k &#x3D; 1，表示第 a 个数加 b）。</p><p>数列从 1 开始计数。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出若干行数字，表示 k &#x3D; 0 时，对应的子数列 [a, b] 的连续和。</p><h2 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h2><p>1 ≤ n ≤ 100000,<br>1 ≤ m ≤ 100000，<br>1 ≤ a ≤ b ≤n,<br>数据保证在任何时候，数列中所有元素之和均在 int 范围内。</p><p>直接贴代码了，如何建树、查询、更改都写注释了，大家应该能看懂</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线段树的构建</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; tree 线段树数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; arr 原数组 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; node 当前线段树数组中所在节点的下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; start 起始位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; end 结束位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> build_tree = <span class="keyword">function</span> (<span class="params">tree, arr, node, start, end</span>) &#123;</span><br><span class="line">    <span class="comment">// 边界条件</span></span><br><span class="line">    <span class="keyword">if</span> (start === end) &#123;</span><br><span class="line">        tree[node] = arr[start];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// mid为中间值，线段树每个节点左边为 start ~ mid，右边为 mid + 1 ~ end</span></span><br><span class="line">        <span class="keyword">const</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>((start + end) / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">const</span> left_node = <span class="number">2</span> * node + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">const</span> right_node = <span class="number">2</span> * node + <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 分别递归左子树和右子树</span></span><br><span class="line">        <span class="title function_">build_tree</span>(tree, arr, left_node, start, mid);</span><br><span class="line">        <span class="title function_">build_tree</span>(tree, arr, right_node, mid + <span class="number">1</span>, end);</span><br><span class="line">        <span class="comment">// 最后把左节点的值加上右节点的值就可以得出当前节点的值</span></span><br><span class="line">        tree[node] = tree[left_node] + tree[right_node];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; tree 线段树数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; arr 原数组 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; node 当前线段树数组中所在节点的下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; start 起始位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; end 结束位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; index 更新的节点的下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; value 更新之后的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> update_tree = <span class="keyword">function</span> (<span class="params">tree, arr, node, start, end, index, value</span>) &#123;</span><br><span class="line">    <span class="comment">// 边界条件，范围只有一个数字，代表一定到达了这个点上</span></span><br><span class="line">    <span class="keyword">if</span> (start === end) &#123;</span><br><span class="line">        tree[node] += value;</span><br><span class="line">        arr[index] += value;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>((start + end) / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">const</span> left_node = <span class="number">2</span> * node + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">const</span> right_node = <span class="number">2</span> * node + <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= start &amp;&amp; index &lt;= mid) &#123;</span><br><span class="line">            <span class="comment">// 更新左分支</span></span><br><span class="line">            <span class="title function_">update_tree</span>(tree, arr, left_node, start, mid, index, value);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 更新右分支</span></span><br><span class="line">            <span class="title function_">update_tree</span>(tree, arr, right_node, mid + <span class="number">1</span>, end, index, value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 改完left_node或right_node之后更新一下tree[node]</span></span><br><span class="line">        tree[node] = tree[left_node] + tree[right_node];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 区间查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; tree 线段树数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; arr 原数组 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; node 当前线段树数组中所在节点的下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; start 起始位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; end 结束位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; left 左边界</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; right 右边界</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> query_tree = <span class="keyword">function</span> (<span class="params">tree, arr, node, start, end, left, right</span>) &#123;</span><br><span class="line">    <span class="comment">// 要查询的区间不在左子树或右子树上</span></span><br><span class="line">    <span class="keyword">if</span> (right &lt; start || left &gt; end) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (start === end) &#123;</span><br><span class="line">        <span class="comment">// 正好计算到叶节点上</span></span><br><span class="line">        <span class="keyword">return</span> tree[node];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left &lt;= start &amp;&amp; end &lt;= right) &#123;</span><br><span class="line">        <span class="comment">// 目标区间包含要查询的区间, 直接返回节点值 </span></span><br><span class="line">        <span class="keyword">return</span> tree[node];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>((start + end) / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">const</span> left_node = <span class="number">2</span> * node + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">const</span> right_node = <span class="number">2</span> * node + <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">const</span> sum_left = <span class="title function_">query_tree</span>(tree, arr, left_node, start, mid, left, right);</span><br><span class="line">        <span class="keyword">const</span> sum_right = <span class="title function_">query_tree</span>(tree, arr, right_node, mid + <span class="number">1</span>, end, left, right);</span><br><span class="line">        <span class="keyword">return</span> sum_left + sum_right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cin = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res = [];</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line"><span class="keyword">const</span> tree = [];</span><br><span class="line"></span><br><span class="line"><span class="title function_">build_tree</span>(tree, arr, <span class="number">0</span>, <span class="number">0</span>, arr.<span class="property">length</span> - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> val <span class="keyword">of</span> cin) &#123;</span><br><span class="line">    <span class="keyword">if</span> (val[<span class="number">0</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="title function_">update_tree</span>(tree, arr, <span class="number">0</span>, <span class="number">0</span>, arr.<span class="property">length</span> - <span class="number">1</span>, val[<span class="number">1</span>] - <span class="number">1</span>, val[<span class="number">2</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">push</span>(<span class="title function_">query_tree</span>(tree, arr, <span class="number">0</span>, <span class="number">0</span>, arr.<span class="property">length</span> - <span class="number">1</span>, val[<span class="number">1</span>] - <span class="number">1</span>, val[<span class="number">2</span>] - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
